<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Winsock创建socket server和client</title>
      <link href="2020/12/14/communication/winsock-chuang-jian-socket-server-he-client/"/>
      <url>2020/12/14/communication/winsock-chuang-jian-socket-server-he-client/</url>
      
        <content type="html"><![CDATA[<p>本文详细介绍在Windows 10下利用Winsock创建socket server和client应用步骤和源码。项目源码可以到我的<a href="https://github.com/MolianWH/CommutionTools/tree/main/Socket/SocketWin">github</a>上下载。在该仓库中，我准备将所有有关通信方式的源码做成工具包，便于以后开发直接使用。本文还可以在我的<a href="https://blog.csdn.net/weixin_38369492/article/details/111032276">CSND</a>上查看。</p><hr><h2 id="1-基本流程"><a href="#1-基本流程" class="headerlink" title="1. 基本流程"></a>1. 基本流程</h2><p>创建TCP/IP流的server/client通用步骤如下：</p><h3 id="1-1-Server和Client创建流程"><a href="#1-1-Server和Client创建流程" class="headerlink" title="1.1 Server和Client创建流程"></a>1.1 Server和Client创建流程</h3><p><strong>Server</strong></p><ol><li>初始化Winsock</li><li>创建socket</li><li>绑定socket</li><li>监听客户端socket</li><li>接受客户端连接请求</li><li>接收和发送数据</li><li> 断开连接</li></ol><p><strong>Client</strong></p><ol><li>初始化Winsock</li><li>创建socket</li><li>连接服务端</li><li>发送和接收数据</li><li>断开连接</li></ol><h3 id="1-2-创建Winsock应用步骤"><a href="#1-2-创建Winsock应用步骤" class="headerlink" title="1.2 创建Winsock应用步骤"></a>1.2 创建Winsock应用步骤</h3><p>创建一个最基础的Winsock应用需要以下几步</p><ol><li>创建一个空项目</li><li>添加一个空的C++ source文件到项目中</li><li>引用Microsoft Windows SDK 的Include、Lib和Src目录</li><li>确保项目连接Winsock库文件：<code>#pragma comment(lib, Ws2_32.lib)</code></li><li>编写Winsock应用程序。使用Winsock API需要包含两个头文件：<strong>Winsock2.h</strong>和<strong>Ws2tcpip.h</strong>。前者包含Winsock的大多数函数、结构体、定义；后者包含在WinSock 2中关于TCP/IP协议的用于检索IP地址的新函数和结构。</li></ol><p>通常一个Winsock应用的头部应该这样写：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;WinSock2.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;WS2tcpip.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(lib, "Ws2_32.lib")</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong>Note</strong></p><ul><li>如果使用ip helper APIs，需要包含Iphlpapi.h。且WinSock2.h需要在其前面。</li><li>Winsock2.h包含了Windows.h一些核心内容，所以通常不需要再包含Windows.h了</li><li>如果要包含Windows.h，必须放在Winsock2.h前，并且要使用<code>#define WIN32_LEAN_AND_MEAN</code>。这是因为Windows.h中包含了Winsock.h（第一个版本），会和Winsock2.h冲突，使用该预定义会避免用Winsock.h</li></ul></blockquote><p>所以一个升级版的头部应该这样写：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> WIN32_LEAN_AND_MEAN</span><span class="token macro property">#<span class="token directive keyword">define</span> WIN32_LEAN_AND_MEAN</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !WIN32_LEAN_AND_MEAN</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;WinSock2.h></span>  </span><span class="token comment" spellcheck="true">// socket</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;WS2tcpip.h></span>  </span><span class="token comment" spellcheck="true">// TCP/IP</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iphlpapi.h></span>  </span><span class="token comment" spellcheck="true">// ip helper APIs</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">// Link to Ws2_32.lib</span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(lib,"Ws2_32.lib")</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-初始化Winsock"><a href="#1-3-初始化Winsock" class="headerlink" title="1.3 初始化Winsock"></a>1.3 初始化Winsock</h3><p>所有调用Winsock函数的进程(应用程序或DLL)必须在调用其他Winsock函数之前初始化Windows socket DLL再使用。这也确保了系统上支持Winsock。</p><ol><li>创建WSADATA对象<pre class=" language-cpp"><code class="language-cpp">WSADATA wsaData<span class="token punctuation">;</span></code></pre></li><li>调用WSAStartup，返回整数值，并通过该值检查错误。 <pre class=" language-cpp"><code class="language-cpp"> <span class="token comment" spellcheck="true">// Initialize WinSock</span> <span class="token keyword">int</span> iRes <span class="token operator">=</span> <span class="token function">WSAStartup</span><span class="token punctuation">(</span><span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>wasData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"WSAStartup failed: %d\n"</span> <span class="token punctuation">,</span> iRes<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre></li></ol><p>调用WSAStartup函数来启动WS2_32.dll的使用。</p><p>WSADATA结构包含关于Windows套接字实现的信息。WSAStartup的MAKEWORD(2,2)参数在系统上请求Winsock的2.2版本，并将传递的版本设置为调用者可以使用的Windows套接字支持的最高版本。</p><h2 id="2-创建server"><a href="#2-创建server" class="headerlink" title="2. 创建server"></a>2. 创建server</h2><p>参考<a href="#11_ServerClient_8">1.1</a>中的步骤，在<a href="#13_Winsock_73">1.3</a>中已经说明了如何初始化Winsock，下面应该是创建server socket</p><h3 id="2-1-创建server-socket"><a href="#2-1-创建server-socket" class="headerlink" title="2.1 创建server socket"></a>2.1 创建server socket</h3><ol><li> 使用<a href="https://docs.microsoft.com/en-us/windows/win32/api/ws2tcpip/nf-ws2tcpip-getaddrinfo">getaddrinfo()</a>确定sockaddr结构体值，getaddrinfo中使用<a href="https://docs.microsoft.com/en-us/windows/win32/api/ws2def/ns-ws2def-addrinfoa">addrinfo</a>结构体。</li></ol><p>使用的信息包含以下内容：</p><table><thead><tr><th>字段</th><th>作用</th></tr></thead><tbody><tr><td>AF_INET</td><td>指定IPv4地址族</td></tr><tr><td>SOCK_STREAM</td><td>指定一个流套接字</td></tr><tr><td>IPPROTO_TCP</td><td>指定TCP协议</td></tr><tr><td>AI_PASSIVE</td><td>AI_PASSIVE标志表示调用者打算在调用bind函数时使用返回的套接字地址结构。当AI_PASSIVE标志被设置并且getaddrinfo函数的nodename参数是一个空指针时，套接字地址结构的IP地址部分被设置为IPv4地址INADDR_ANY或IPv6地址IN6ADDR_ANY_INIT。</td></tr></tbody></table><p>代码如下：</p><pre class=" language-cpp"><code class="language-cpp">   <span class="token macro property">#<span class="token directive keyword">define</span> DEFAULT_PORT "27015"</span><span class="token comment" spellcheck="true">// 2. create server socket</span>    addrinfo<span class="token operator">*</span> result <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> hints<span class="token punctuation">;</span>    <span class="token function">ZeroMemory</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hints<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>hints<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hints<span class="token punctuation">.</span>ai_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    hints<span class="token punctuation">.</span>ai_socktype <span class="token operator">=</span> SOCK_STREAM<span class="token punctuation">;</span>    hints<span class="token punctuation">.</span>ai_protocol <span class="token operator">=</span> IPPROTO_TCP<span class="token punctuation">;</span>    hints<span class="token punctuation">.</span>ai_flags <span class="token operator">=</span> AI_PASSIVE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Resolve the local address and port to be used by the server</span>    iRes <span class="token operator">=</span> <span class="token function">getaddrinfo</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> DEFAULT_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hints<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"getaddrinfo failed:%d\n"</span><span class="token punctuation">,</span>iRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><div id="refer-anchor-212"></div><ol start="2"><li>创建SOCKET对象ListenSocket ，用来监听客户端连接请求。</li></ol><pre class=" language-cpp"><code class="language-cpp">SOCKET ListenSocket <span class="token operator">=</span> INVALID_SOCKET<span class="token punctuation">;</span></code></pre><div id="refer-anchor-213"></div><ol start="3"><li>调用socket函数，返回值赋给ListenSocket 。</li></ol><p>对于server，使用getaddrinfo返回的第一个IP地址，该IP地址与在提示参数中指定的地址家族、套接字类型和协议相匹配</p><p>如果想监听IPv6，ai_family = AF_INET6；</p><p>如果想同时监听IPv4和IPv6，必须创建两个监听套接字，一个监听IPv6，一个监听IPv4。应用程序必须分别处理这两个套接字。</p><pre class=" language-cpp"><code class="language-cpp">ListenSocket <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>result<span class="token operator">-</span><span class="token operator">></span>ai_family<span class="token punctuation">,</span> result<span class="token operator">-</span><span class="token operator">></span>ai_socktype<span class="token punctuation">,</span> result<span class="token operator">-</span><span class="token operator">></span>ai_protocol<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><div id="refer-anchor-214"></div><ol start="4"><li>检查错误，确保socket是一个有效的套接字</li></ol><pre class=" language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">// Check for errors to ensure that the socket is valid socket</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ListenSocket <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Error at socket():"</span><span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">freeaddrinfo</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-2-绑定socket"><a href="#2-2-绑定socket" class="headerlink" title="2.2 绑定socket"></a>2.2 绑定socket</h3><p>server如果要接收client连接请求，需要绑定一个网络地址。下面阐述如果绑定一个创建了IP地址和端口的socket。client使用IP地址和端口连接主机。</p><ol><li>bind并检查错误</li></ol><p>sockaddr结构保存有关地址家族、IP地址和端口号的信息。</p><p>调用<code>bind()</code>，传递创建的socket和getaddrinfo函数返回的sockaddr结构作为参数。检查一般性错误。</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">// 3. Bind socket</span>    <span class="token comment" spellcheck="true">// Setup the TCP listening socket</span>    iRes <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>ListenSocket<span class="token punctuation">,</span> result<span class="token operator">-</span><span class="token operator">></span>ai_addr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>result<span class="token operator">-</span><span class="token operator">></span>ai_addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"bind failed with error: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">freeaddrinfo</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">closesocket</span><span class="token punctuation">(</span>ListenSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ol start="2"><li>释放存放地址信息的内存空间</li></ol><p>一旦绑定完成，getaddrinfo获取的地址信息就不在需要了，使用freeaddrinfo释放分配的内存。</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">// free memory allocated by getaddrinfo() for address information</span>    <span class="token function">freeaddrinfo</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-3-监听"><a href="#2-3-监听" class="headerlink" title="2.3 监听"></a>2.3 监听</h3><p>socket绑定IP地址和端口后，需要监听该IP和端口发送的连接请求。</p><p>调用<code>listen()</code>将创建的socket和待定的值(待定连接队列的最大长度)作为参数传递。在本例中，backlog参数被设置为SOMAXCONN。此值是一个特殊常量，指示此套接字的Winsock提供程序允许队列中挂起连接的最大合理数量。检查返回值是否有一般错误。</p><h3 id="2-4-接受连接请求"><a href="#2-4-接受连接请求" class="headerlink" title="2.4 接受连接请求"></a>2.4 接受连接请求</h3><p>监听时若收到连接请求，需处理该请求。</p><ol><li>创建临时SOCKET对象ClientSocket接受client的连接</li></ol><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 5. Accepting a Connetion</span><span class="token comment" spellcheck="true">// Create temporary ClientSocket for accepting connetions from clients</span>SOCKET ClientSocket <span class="token operator">=</span> INVALID_SOCKET<span class="token punctuation">;</span></code></pre><ol start="2"><li>通常server要监听多个客户端的连接请求。对一个高性能的server来说，需要使用多线程处理多客户端请求。</li></ol><p>Winsock有多种处理多客户端连接请求的技术。一种编程技术是创建一个连续循环，使用<code>listen()</code>检查连接请求(参见<a href="#23__195">2.3</a>)。如果出现连接请求，应用程序将调用<code>accept、AcceptEx或WSAAccept</code>函数，并将工作传递给另一个线程来处理请求。还可以使用其他几种编程技术。</p><blockquote><p><strong>Note</strong><br>这个基本示例非常简单，并且不使用多线程。该示例还只侦听和接受单个连接。</p></blockquote><pre class=" language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">// Accept a client socket</span>    ClientSocket <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>ListenSocket<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ClientSocket <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"accept failed: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">closesocket</span><span class="token punctuation">(</span>ListenSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-5-接收好发送数据"><a href="#2-5-接收好发送数据" class="headerlink" title="2.5 接收好发送数据"></a>2.5 接收好发送数据</h3><p>使用<code>recv()</code>和<code>send()</code>接收和发送消息</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> DEFAULT_BUFLEN 512</span>    <span class="token comment" spellcheck="true">// 6. Receiving and Sending Data on the Server</span>    <span class="token keyword">char</span> recvbuf<span class="token punctuation">[</span>DEFAULT_BUFLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> iSendRes<span class="token punctuation">;</span>    <span class="token keyword">int</span> recvbuflen <span class="token operator">=</span> DEFAULT_BUFLEN<span class="token punctuation">;</span>    iRes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Receive until the peer shuts down the connection</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iRes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        iRes <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>ClientSocket<span class="token punctuation">,</span> recvbuf<span class="token punctuation">,</span> recvbuflen<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bytes received: "</span> <span class="token operator">&lt;&lt;</span> iRes <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Echo the buffr back to the sender</span>            iSendRes <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>ClientSocket<span class="token punctuation">,</span> recvbuf<span class="token punctuation">,</span> iRes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>iSendRes <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"send failed: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token function">closesocket</span><span class="token punctuation">(</span>ClientSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bytes sent: "</span> <span class="token operator">&lt;&lt;</span> iSendRes <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span><span class="token string">"recv failed: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">closesocket</span><span class="token punctuation">(</span>ClientSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-6-断开连接"><a href="#2-6-断开连接" class="headerlink" title="2.6 断开连接"></a>2.6 断开连接</h3><ol><li><p>当server完成向client发送数据时，可以调用<code>shutdown()</code>，指定<code>SD_SEND</code>来关闭套接字的发送端。这允许客户端释放此套接字的一些资源。服务器应用程序仍然可以接收套接字上的数据。</p><pre class=" language-cpp"><code class="language-cpp"> <span class="token comment" spellcheck="true">// 7.Disconneting the Server</span> <span class="token comment" spellcheck="true">// shutdown the send half of the connetiong since no more data will be sent</span> iRes <span class="token operator">=</span> <span class="token function">shutdown</span><span class="token punctuation">(</span>ClientSocket<span class="token punctuation">,</span> SD_SEND<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span>     cout <span class="token operator">&lt;&lt;</span> <span class="token string">"shutdown failed: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token function">closesocket</span><span class="token punctuation">(</span>ClientSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><p>当客户端应用程序完成接收数据时，将调用<code>closesocket()</code>来关闭套接字。</p></li></ol><p>当客户端应用程序使用Windows套接字DLL完成时，WSACleanup函数被调用来释放资源。</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">// cleanup</span>    <span class="token function">closesocket</span><span class="token punctuation">(</span>ClientSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><h2 id="3-创建client"><a href="#3-创建client" class="headerlink" title="3. 创建client"></a>3. 创建client</h2><p>与第2节大体相似。</p><h3 id="3-1-创建client-socket"><a href="#3-1-创建client-socket" class="headerlink" title="3.1 创建client socket"></a>3.1 创建client socket</h3><ol><li>对于这个应用程序，Internet地址族是未指定的<code>AF_UNSPEC</code>，因此可以返回IPv6或IPv4地址。其余与<a href="#21_server_socket_99">2.1</a>的1基本相同</li></ol><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> addrinfo <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>                <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>                hints<span class="token punctuation">;</span><span class="token function">ZeroMemory</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>hints<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>hints<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>hints<span class="token punctuation">.</span>ai_family <span class="token operator">=</span> AF_UNSPEC<span class="token punctuation">;</span>hints<span class="token punctuation">.</span>ai_socktype <span class="token operator">=</span> SOCK_STREAM<span class="token punctuation">;</span>hints<span class="token punctuation">.</span>ai_protocol <span class="token operator">=</span> IPPROTO_TCP<span class="token punctuation">;</span></code></pre><ol start="2"><li>与<a href="#21_server_socket_99">2.1</a>的1不同的是，请求在命令行中传递的服务器名称的IP地址。</li></ol><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> DEFAULT_PORT "27015"</span><span class="token comment" spellcheck="true">// Resolve the server address and port</span>iResult <span class="token operator">=</span> <span class="token function">getaddrinfo</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> DEFAULT_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hints<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>iResult <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"getaddrinfo failed: %d\n"</span><span class="token punctuation">,</span> iResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>同<a href="#21_server_socket_99">2.1</a>的<a href="#refer-anchor-212">2</a></li></ol><pre class=" language-cpp"><code class="language-cpp">SOCKET ConnectSocket <span class="token operator">=</span> INVALID_SOCKET<span class="token punctuation">;</span></code></pre><ol start="4"><li>同<a href="#21_server_socket_99">2.1</a>的<a href="#refer-anchor-213">3</a></li></ol><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// Attempt to connect to the first address returned by</span><span class="token comment" spellcheck="true">// the call to getaddrinfo</span>ptr<span class="token operator">=</span>result<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create a SOCKET for connecting to server</span>ConnectSocket <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>ptr<span class="token operator">-</span><span class="token operator">></span>ai_family<span class="token punctuation">,</span> ptr<span class="token operator">-</span><span class="token operator">></span>ai_socktype<span class="token punctuation">,</span>     ptr<span class="token operator">-</span><span class="token operator">></span>ai_protocol<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="5"><li>同<a href="#21_server_socket_99">2.1</a>的<a href="#refer-anchor-214">4</a></li></ol><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>ConnectSocket <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error at socket(): %ld\n"</span><span class="token punctuation">,</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freeaddrinfo</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-连接server"><a href="#3-2-连接server" class="headerlink" title="3.2 连接server"></a>3.2 连接server</h3><p>客户端想要通信，需要连接server。</p><p>调用<code>connect()</code>，设置参数为创建的socket和sockaddr结构，并检查错误。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// Connect to server.</span>iResult <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span> ConnectSocket<span class="token punctuation">,</span> ptr<span class="token operator">-</span><span class="token operator">></span>ai_addr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ptr<span class="token operator">-</span><span class="token operator">></span>ai_addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>iResult <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">closesocket</span><span class="token punctuation">(</span>ConnectSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>    ConnectSocket <span class="token operator">=</span> INVALID_SOCKET<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Should really try the next address returned by getaddrinfo</span><span class="token comment" spellcheck="true">// if the connect call failed</span><span class="token comment" spellcheck="true">// But for this simple example we just free the resources</span><span class="token comment" spellcheck="true">// returned by getaddrinfo and print an error message</span><span class="token function">freeaddrinfo</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ConnectSocket <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Unable to connect to server!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在本例中，<code>getaddrinfo()</code>返回的第一个IP地址用于指定传递给连接的<code>sockaddr</code>结构。如果对第一个IP地址的连接调用失败，那么尝试从<code>getaddrinfo()</code>返回的链表中的下一个<code>addrinfo</code>结构。</p><p>sockaddr结构中指定的信息包括:</p><ul><li>客户机将尝试连接到的服务器的IP地址。</li><li>客户机将连接到的服务器端口号。当</li><li>客户端调用<code>getaddrinfo()</code>时，该端口被指定为端口27015。</li></ul><h3 id="3-3-发送接收数据"><a href="#3-3-发送接收数据" class="headerlink" title="3.3 发送接收数据"></a>3.3 发送接收数据</h3><pre class=" language-cpp#define"><code class="language-cpp#define">int recvbuflen = DEFAULT_BUFLEN;const char *sendbuf = "this is a test";char recvbuf[DEFAULT_BUFLEN];int iResult;// Send an initial bufferiResult = send(ConnectSocket, sendbuf, (int) strlen(sendbuf), 0);if (iResult == SOCKET_ERROR) {    printf("send failed: %d\n", WSAGetLastError());    closesocket(ConnectSocket);    WSACleanup();    return 1;}printf("Bytes Sent: %ld\n", iResult);// shutdown the connection for sending since no more data will be sent// the client can still use the ConnectSocket for receiving dataiResult = shutdown(ConnectSocket, SD_SEND);if (iResult == SOCKET_ERROR) {    printf("shutdown failed: %d\n", WSAGetLastError());    closesocket(ConnectSocket);    WSACleanup();    return 1;}// Receive data until the server closes the connectiondo {    iResult = recv(ConnectSocket, recvbuf, recvbuflen, 0);    if (iResult > 0)        printf("Bytes received: %d\n", iResult);    else if (iResult == 0)        printf("Connection closed\n");    else        printf("recv failed: %d\n", WSAGetLastError());} while (iResult > 0);</code></pre><h3 id="3-4-断开连接"><a href="#3-4-断开连接" class="headerlink" title="3.4 断开连接"></a>3.4 断开连接</h3><p>同<a href="#26__280">2.6</a></p><h2 id="4-完整应用代码"><a href="#4-完整应用代码" class="headerlink" title="4. 完整应用代码"></a>4. 完整应用代码</h2><h3 id="4-1-Server"><a href="#4-1-Server" class="headerlink" title="4.1 Server"></a>4.1 Server</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// FileName: server.cpp</span><span class="token comment" spellcheck="true">// Description: Create server socket application</span><span class="token comment" spellcheck="true">// Author: Jiejing.Ma</span><span class="token comment" spellcheck="true">// Update: 2020/12/11</span><span class="token macro property">#<span class="token directive keyword">undef</span> UNICODE</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> WIN32_LEAN_AND_MEAN</span><span class="token macro property">#<span class="token directive keyword">define</span> WIN32_LEAN_AND_MEAN</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !WIN32_LEAN_AND_MEAN</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;WinSock2.h></span>  </span><span class="token comment" spellcheck="true">// socket</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;WS2tcpip.h></span>  </span><span class="token comment" spellcheck="true">// TCP/IP</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iphlpapi.h></span>  </span><span class="token comment" spellcheck="true">// ip helper APIs</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token comment" spellcheck="true">// Link to Ws2_32.lib</span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(lib,"Ws2_32.lib")</span><span class="token macro property">#<span class="token directive keyword">define</span> DEFAULT_BUFLEN 512</span><span class="token macro property">#<span class="token directive keyword">define</span> DEFAULT_PORT "27015"</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    WSADATA wasData<span class="token punctuation">;</span>    <span class="token keyword">int</span> iRes<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Create a SOCKET object to listen for client connections</span>    SOCKET ListenSocket <span class="token operator">=</span> INVALID_SOCKET<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Create temporary ClientSocket for accepting connetions from clients</span>    SOCKET ClientSocket <span class="token operator">=</span> INVALID_SOCKET<span class="token punctuation">;</span>    addrinfo<span class="token operator">*</span> result <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    addrinfo hints<span class="token punctuation">;</span>    <span class="token keyword">char</span> recvbuf<span class="token punctuation">[</span>DEFAULT_BUFLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> iSendRes<span class="token punctuation">;</span>    <span class="token keyword">int</span> recvbuflen <span class="token operator">=</span> DEFAULT_BUFLEN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. Initialize WinSock</span>    iRes <span class="token operator">=</span> <span class="token function">WSAStartup</span><span class="token punctuation">(</span><span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>wasData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"WSAStartup failed: "</span> <span class="token operator">&lt;&lt;</span> iRes <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. Create server socket</span>    <span class="token function">ZeroMemory</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hints<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>hints<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hints<span class="token punctuation">.</span>ai_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    hints<span class="token punctuation">.</span>ai_socktype <span class="token operator">=</span> SOCK_STREAM<span class="token punctuation">;</span>    hints<span class="token punctuation">.</span>ai_protocol <span class="token operator">=</span> IPPROTO_TCP<span class="token punctuation">;</span>    hints<span class="token punctuation">.</span>ai_flags <span class="token operator">=</span> AI_PASSIVE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Resolve the local address and port to be used by the server</span>    iRes <span class="token operator">=</span> <span class="token function">getaddrinfo</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> DEFAULT_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hints<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"getaddrinfo failed: "</span> <span class="token operator">&lt;&lt;</span> iRes <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Create a SOCKET for connecting to server</span>    ListenSocket <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>result<span class="token operator">-</span><span class="token operator">></span>ai_family<span class="token punctuation">,</span> result<span class="token operator">-</span><span class="token operator">></span>ai_socktype<span class="token punctuation">,</span> result<span class="token operator">-</span><span class="token operator">></span>ai_protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Check for errors to ensure that the socket is valid socket</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ListenSocket <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Error at socket():"</span><span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">freeaddrinfo</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. Bind socket</span>    <span class="token comment" spellcheck="true">// Setup the TCP listening socket</span>    iRes <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>ListenSocket<span class="token punctuation">,</span> result<span class="token operator">-</span><span class="token operator">></span>ai_addr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>result<span class="token operator">-</span><span class="token operator">></span>ai_addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"bind failed with error: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">freeaddrinfo</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">closesocket</span><span class="token punctuation">(</span>ListenSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// free memory allocated by getaddrinfo() for address information</span>    <span class="token function">freeaddrinfo</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4. Listening on a Socket</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>ListenSocket<span class="token punctuation">,</span> SOMAXCONN<span class="token punctuation">)</span> <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Listen failed with error: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">closesocket</span><span class="token punctuation">(</span>ListenSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 5. Accepting a Connetion</span>    <span class="token comment" spellcheck="true">// Accept a client socket</span>    ClientSocket <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>ListenSocket<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ClientSocket <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"accept failed: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">closesocket</span><span class="token punctuation">(</span>ListenSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// No longer need server socket</span>    <span class="token function">closesocket</span><span class="token punctuation">(</span>ListenSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 6. Receiving and Sending Data on the Server</span>    iRes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Receive until the peer shuts down the connection</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iRes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        iRes <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>ClientSocket<span class="token punctuation">,</span> recvbuf<span class="token punctuation">,</span> recvbuflen<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bytes received: "</span> <span class="token operator">&lt;&lt;</span> iRes <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Echo the buffr back to the sender</span>            iSendRes <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>ClientSocket<span class="token punctuation">,</span> recvbuf<span class="token punctuation">,</span> iRes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>iSendRes <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"send failed: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token function">closesocket</span><span class="token punctuation">(</span>ClientSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bytes sent: "</span> <span class="token operator">&lt;&lt;</span> iSendRes <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span><span class="token string">"recv failed: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">closesocket</span><span class="token punctuation">(</span>ClientSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 7.Disconneting the Server</span>    <span class="token comment" spellcheck="true">// shutdown the send half of the connetiong since no more data will be sent</span>    iRes <span class="token operator">=</span> <span class="token function">shutdown</span><span class="token punctuation">(</span>ClientSocket<span class="token punctuation">,</span> SD_SEND<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"shutdown failed: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">closesocket</span><span class="token punctuation">(</span>ClientSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// cleanup</span>    <span class="token function">closesocket</span><span class="token punctuation">(</span>ClientSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-Client"><a href="#4-2-Client" class="headerlink" title="4.2 Client"></a>4.2 Client</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// FileName: client.cpp</span><span class="token comment" spellcheck="true">// Description: Create client socket application</span><span class="token comment" spellcheck="true">// Author: Jiejing.Ma</span><span class="token comment" spellcheck="true">// Update: 2020/12/11</span><span class="token macro property">#<span class="token directive keyword">undef</span> UNICODE</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> WIN32_LEAN_AND_MEAN</span><span class="token macro property">#<span class="token directive keyword">define</span> WIN32_LEAN_AND_MEAN</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !WIN32_LEAN_AND_MEAN</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;WinSock2.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;WS2tcpip.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iphlpapi.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token comment" spellcheck="true">// Need to link with Ws2_32.li, Mswsock.lib, Advapi32.lib</span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(lib,"Ws2_32.lib")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(lib,"Mswsock.lib")</span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(lib,"Advapi32.lib")</span><span class="token macro property">#<span class="token directive keyword">define</span> DEFAULT_BUFLEN 512</span><span class="token macro property">#<span class="token directive keyword">define</span> DEFAULT_PORT "27015"</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    WSADATA wsaData<span class="token punctuation">;</span>    <span class="token keyword">int</span> iRes<span class="token punctuation">;</span>    SOCKET ConnectSocket  <span class="token operator">=</span> INVALID_SOCKET<span class="token punctuation">;</span>    addrinfo hints<span class="token punctuation">;</span>    addrinfo<span class="token operator">*</span> result <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>ptr<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sendbuf<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> recvbuf<span class="token punctuation">[</span>DEFAULT_BUFLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> recvbuflen <span class="token operator">=</span> DEFAULT_BUFLEN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. Initialize WinSock</span>    iRes <span class="token operator">=</span> <span class="token function">WSAStartup</span><span class="token punctuation">(</span><span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>wsaData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"WSAStartup failed: "</span> <span class="token operator">&lt;&lt;</span> iRes <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. Create socket</span>    <span class="token function">ZeroMemory</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hints<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>hints<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hints<span class="token punctuation">.</span>ai_family <span class="token operator">=</span> AF_UNSPEC<span class="token punctuation">;</span>    hints<span class="token punctuation">.</span>ai_protocol <span class="token operator">=</span> IPPROTO_TCP<span class="token punctuation">;</span>    hints<span class="token punctuation">.</span>ai_socktype <span class="token operator">=</span> SOCK_STREAM<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Resolve the server address and port</span>    iRes <span class="token operator">=</span> <span class="token function">getaddrinfo</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> DEFAULT_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hints<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"getaddrinfo failed:"</span> <span class="token operator">&lt;&lt;</span> iRes <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Attempt to connect to an address until one succeeds</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ptr <span class="token operator">=</span> result<span class="token punctuation">;</span> ptr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> ptr <span class="token operator">=</span> ptr<span class="token operator">-</span><span class="token operator">></span>ai_next<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Create a SOCKET for connecting to server    </span>        ConnectSocket  <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>ptr<span class="token operator">-</span><span class="token operator">></span>ai_family<span class="token punctuation">,</span> ptr<span class="token operator">-</span><span class="token operator">></span>ai_socktype<span class="token punctuation">,</span> ptr<span class="token operator">-</span><span class="token operator">></span>ai_protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ConnectSocket  <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Error at socket():"</span> <span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3.Connect to Server</span>        iRes <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>ConnectSocket <span class="token punctuation">,</span> ptr<span class="token operator">-</span><span class="token operator">></span>ai_addr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ptr<span class="token operator">-</span><span class="token operator">></span>ai_addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">closesocket</span><span class="token punctuation">(</span>ConnectSocket <span class="token punctuation">)</span><span class="token punctuation">;</span>            ConnectSocket  <span class="token operator">=</span> INVALID_SOCKET<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">freeaddrinfo</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ConnectSocket  <span class="token operator">==</span> INVALID_SOCKET<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Unable to connect to server!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4. Send and Receive data</span>    <span class="token comment" spellcheck="true">// Send an initial buffer</span>    iRes <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>ConnectSocket <span class="token punctuation">,</span> sendbuf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span>sendbuf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"send faild: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">closesocket</span><span class="token punctuation">(</span>ConnectSocket <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bytes sent: "</span> <span class="token operator">&lt;&lt;</span> iRes <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// shutdown the connection for sending since no more data will be sent</span>    <span class="token comment" spellcheck="true">// the client can still use the ConnectSocket for receiving data</span>    iRes <span class="token operator">=</span> <span class="token function">shutdown</span><span class="token punctuation">(</span>ConnectSocket <span class="token punctuation">,</span> SD_SEND<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"shutdown failed: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">closesocket</span><span class="token punctuation">(</span>ConnectSocket <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    iRes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iRes<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        iRes <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>ConnectSocket <span class="token punctuation">,</span> recvbuf<span class="token punctuation">,</span> recvbuflen<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bytes received: %d\n"</span><span class="token punctuation">,</span> iRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>iRes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Connection closed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv failed: %d\n"</span><span class="token punctuation">,</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 5. Disconnect</span>    <span class="token comment" spellcheck="true">// cleanup</span>    <span class="token function">closesocket</span><span class="token punctuation">(</span>ConnectSocket <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Communication </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在C++与python间传视频帧</title>
      <link href="2020/11/30/communication/zai-c-yu-python-jian-chuan-shi-pin-zheng/"/>
      <url>2020/11/30/communication/zai-c-yu-python-jian-chuan-shi-pin-zheng/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本案例旨在实现跨语言（C++和python间）视频的实时通信。这一工作内容在实际工程中很常见。由于python语言支持很多第三方库，对于开发深度学习项目很方便，验真算法速度快，很多开源算法也大多基于python实现。这时可能就会出现C++的代码借助python语言做一些图像处理（包括目标检测、姿态估计、目标跟踪等任务）的需求。</p><p>平台环境：</p><ul><li>Win10</li><li>VS2019</li><li>OpenCV</li></ul><p>进程间通信方式：共享内存</p><h1 id="1-进程间通信"><a href="#1-进程间通信" class="headerlink" title="1.进程间通信"></a>1.进程间通信</h1><p>进程间通信方式有很多种。工程上最常用的是<strong>共享内存</strong>和<strong>socket机制</strong>。前者效率高，基本思想就是开辟一块公共的内存空间，供两个或多个进程之间使用。为了标识这个公共空间，要给它起个名。但是共享内存的方式不支持多平台。而socket刚好就是支持多平台间进程通信的方式。当然这种方式也会慢一些。</p><p>在本案例中，分别尝试了两种方式。虽然最终共享内存的方式写内存帧率只达到15fps左右，但是要比socket快了近20倍（大概0.5-1fps左右）。下面将介绍这两种机制的具体实现过程。</p><h1 id="2-基于共享内存的视频传输"><a href="#2-基于共享内存的视频传输" class="headerlink" title="2.基于共享内存的视频传输"></a>2.基于共享内存的视频传输</h1><h2 id="2-1-C-之间的通信"><a href="#2-1-C-之间的通信" class="headerlink" title="2.1 C++之间的通信"></a>2.1 C++之间的通信</h2><h3 id="2-1-1-接口函数"><a href="#2-1-1-接口函数" class="headerlink" title="2.1.1 接口函数"></a>2.1.1 接口函数</h3><p>首先验证C++之间能通信。这里使用的是<a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createfilemappinga">CreateFileMapping</a>和<a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-mapviewoffile">MapViewOfFile</a>进行共享内存的创建和映射。</p><p>其中<a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createfilemappinga">CreateFileMapping</a>的接口为，参数含义详解请点击链接。</p><pre class=" language-cpp"><code class="language-cpp">HANDLE <span class="token function">CreateFileMapping</span><span class="token punctuation">(</span>  HANDLE                hFile<span class="token punctuation">,</span>  LPSECURITY_ATTRIBUTES lpFileMappingAttributes<span class="token punctuation">,</span>  DWORD                 flProtect<span class="token punctuation">,</span>  DWORD                 dwMaximumSizeHigh<span class="token punctuation">,</span>  DWORD                 dwMaximumSizeLow<span class="token punctuation">,</span>  LPCSTR                lpName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-mapviewoffile">MapViewOfFile</a>的接口为</p><pre class=" language-cpp"><code class="language-cpp">LPVOID <span class="token function">MapViewOfFile</span><span class="token punctuation">(</span>  HANDLE hFileMappingObject<span class="token punctuation">,</span>  DWORD  dwDesiredAccess<span class="token punctuation">,</span>  DWORD  dwFileOffsetHigh<span class="token punctuation">,</span>  DWORD  dwFileOffsetLow<span class="token punctuation">,</span>  SIZE_T dwNumberOfBytesToMap<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-1-2-创建数据格式和共享内存信息"><a href="#2-1-2-创建数据格式和共享内存信息" class="headerlink" title="2.1.2 创建数据格式和共享内存信息"></a>2.1.2 创建数据格式和共享内存信息</h3><p>首先需要一个图像的头部</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> width<span class="token punctuation">;</span>    <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token keyword">int</span> type<span class="token punctuation">;</span><span class="token punctuation">}</span>ImgInf<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//图像信息</span></code></pre><p>由于sizeof(int)=4，所以这里ImgInf结构体大小为12B。在进行共享内存映射时，我们需要这个大小去做偏移量，找到图像数据。</p><p>接下来要定义图像的数据信息</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> FRAME_NUMBER         1               </span><span class="token comment" spellcheck="true">// 图像路数</span><span class="token macro property">#<span class="token directive keyword">define</span> FRAME_W              1920</span><span class="token macro property">#<span class="token directive keyword">define</span> FRAME_H              1080</span><span class="token macro property">#<span class="token directive keyword">define</span> FRAME_W_H            FRAME_W*FRAME_H</span><span class="token comment" spellcheck="true">// 图像分辨率：彩色图（3通道）+图像信息结构体</span><span class="token macro property">#<span class="token directive keyword">define</span> FRAME_SIZE           FRAME_W_H*sizeof(unsigned char)*3+sizeof(ImgInf)</span><span class="token macro property">#<span class="token directive keyword">define</span> MEMORY_SIZE          FRAME_NUMBER*FRAME_SIZE</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201130102605383.PNG#pic_center" alt="图像数据空间分配"></p><p>定义共享内存类SHAREDMEMORY</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">SHAREDMEMORY</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">SHAREDMEMORY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">SHAREDMEMORY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//void SendBox(TrackBox&amp; BOX);</span>    <span class="token comment" spellcheck="true">//void RecBox(TrackBox&amp; BOX);</span>    <span class="token comment" spellcheck="true">//void SendVectorBox(vector&lt;TrackBox>&amp; VTrackBox);</span>    <span class="token comment" spellcheck="true">//void RecieveVectorBox(vector&lt;TrackBox>&amp; VTrackBox);</span>    <span class="token keyword">void</span> <span class="token function">SendMat</span><span class="token punctuation">(</span>cv<span class="token operator">::</span>Mat img<span class="token punctuation">,</span> <span class="token keyword">char</span> indexAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token operator">::</span>Mat  <span class="token function">ReceiveMat</span><span class="token punctuation">(</span><span class="token keyword">char</span> indexAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">SendStr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">ReceiveStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    HANDLE hShareMem<span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//共享内存句柄</span>    TCHAR sShareMemName<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"CppPytonSharedFrame"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 共享内存名称</span>    LPCTSTR pBuf<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>其中SendMat为图像数据发送，ReceiveMat为图像接收。<br>SendStr为字符串发送，ReceiveStr为字符串接收。</p><p>最后的<strong>ShareMemory.h</strong>文件如下：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token comment" spellcheck="true">// ShareMemory.h : 此文件包含共享内存数据定义、大小确定、位置分配、信息定义</span><span class="token comment" spellcheck="true">// Author : Jiejing.Ma</span><span class="token comment" spellcheck="true">// Update : 2020/11/27</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> ShareMemory_H</span><span class="token macro property">#<span class="token directive keyword">define</span> ShareMemory_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/core.hpp></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/videoio.hpp></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/highgui.hpp></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/imgproc.hpp></span>  </span><span class="token comment" spellcheck="true">// cv::Canny()</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token comment" spellcheck="true">//=================================共享内存数据定义=================================</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> width<span class="token punctuation">;</span>    <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token keyword">int</span> type<span class="token punctuation">;</span><span class="token punctuation">}</span>ImgInf<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//图像信息</span><span class="token comment" spellcheck="true">//=================================共享内存大小确定=================================</span><span class="token comment" spellcheck="true">// 为图像分配空间</span><span class="token macro property">#<span class="token directive keyword">define</span> FRAME_NUMBER         1               </span><span class="token comment" spellcheck="true">// 图像路数</span><span class="token macro property">#<span class="token directive keyword">define</span> FRAME_W              1920</span><span class="token macro property">#<span class="token directive keyword">define</span> FRAME_H              1080</span><span class="token macro property">#<span class="token directive keyword">define</span> FRAME_W_H            FRAME_W*FRAME_H</span><span class="token comment" spellcheck="true">// 图像分辨率：彩色图（3通道）+图像信息结构体</span><span class="token macro property">#<span class="token directive keyword">define</span> FRAME_SIZE           FRAME_W_H*sizeof(unsigned char)*3+sizeof(ImgInf)</span><span class="token macro property">#<span class="token directive keyword">define</span> MEMORY_SIZE          FRAME_NUMBER*FRAME_SIZE</span><span class="token comment" spellcheck="true">//=================================共享内存信息定义=================================</span><span class="token macro property">#<span class="token directive keyword">define</span> INITSUCCESS      0</span><span class="token macro property">#<span class="token directive keyword">define</span> CREATEMAPFAILED  1</span><span class="token macro property">#<span class="token directive keyword">define</span> MAPVIEWFAILED    2</span><span class="token keyword">class</span> <span class="token class-name">SHAREDMEMORY</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">SHAREDMEMORY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">SHAREDMEMORY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">SendMat</span><span class="token punctuation">(</span>cv<span class="token operator">::</span>Mat img<span class="token punctuation">,</span> <span class="token keyword">char</span> indexAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token operator">::</span>Mat  <span class="token function">ReceiveMat</span><span class="token punctuation">(</span><span class="token keyword">char</span> indexAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">SendStr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">ReceiveStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    HANDLE hShareMem<span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//共享内存句柄</span>    TCHAR sShareMemName<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"ShareMedia"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 共享内存名称</span>    LPCTSTR pBuf<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !ShareMemory_H</span></code></pre><p>对应的<strong>ShareMemory.cpp</strong>文件为类的实现。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once </span><span class="token comment" spellcheck="true">// ShareMemory.cpp : 此文件包含信息定义SHAREDMEMOR类的实现</span><span class="token comment" spellcheck="true">// Author : MJJ</span><span class="token comment" spellcheck="true">// Update : 2020/11/27</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> ShareMemory_CPP</span><span class="token macro property">#<span class="token directive keyword">define</span> ShareMemory_CPP</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ShareMemory.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*************************************************************************************FuncName  :SHAREDMEMORY::~SHAREDMEMORY()Desc      :构造函数创建共享内存Input     :NoneOutput    :None**************************************************************************************/</span>SHAREDMEMORY<span class="token operator">::</span><span class="token function">SHAREDMEMORY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    hShareMem <span class="token operator">=</span> <span class="token function">CreateFileMapping</span><span class="token punctuation">(</span>        INVALID_HANDLE_VALUE<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// use paging file</span>        <span class="token constant">NULL</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true">//default security</span>        PAGE_READWRITE<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//read/write access</span>        <span class="token number">0</span><span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">// maximum object size(high-order DWORD)</span>        MEMORY_SIZE<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//maximum object size(low-order DWORD)</span>        sShareMemName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//name of mapping object</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hShareMem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  映射对象视图，得到共享内存指针，设置数据</span>        pBuf <span class="token operator">=</span> <span class="token punctuation">(</span>LPTSTR<span class="token punctuation">)</span><span class="token function">MapViewOfFile</span><span class="token punctuation">(</span>            hShareMem<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//handle to map object</span>            FILE_MAP_ALL_ACCESS<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// read/write permission</span>            <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token number">0</span><span class="token punctuation">,</span>            MEMORY_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"memory size:"</span> <span class="token operator">&lt;&lt;</span> MEMORY_SIZE<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 若映射失败退出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pBuf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Could not map view of framebuffer file."</span> <span class="token operator">&lt;&lt;</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>            <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hShareMem<span class="token punctuation">)</span><span class="token punctuation">;</span>            state <span class="token operator">=</span> MAPVIEWFAILED<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Could not create file mapping object."</span> <span class="token operator">&lt;&lt;</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        state <span class="token operator">=</span> CREATEMAPFAILED<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    state <span class="token operator">=</span> INITSUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*************************************************************************************FuncName  :SHAREDMEMORY::~SHAREDMEMORY()Desc      :析构函数释放Input     :NoneOutput    :None**************************************************************************************/</span>SHAREDMEMORY<span class="token operator">::</span><span class="token operator">~</span><span class="token function">SHAREDMEMORY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"unmap shared addr."</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token function">UnmapViewOfFile</span><span class="token punctuation">(</span>pBuf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//释放；</span>    <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hShareMem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*************************************************************************************FuncName  :void SHAREDMEMORY::SendMat(cv::Mat img, char indexAddress)Desc      :发送Mat数据Input     :    Mat img               发送图像    char indexAddress     共享内存中起始位置，若只有一路视频则无偏移Output    :None**************************************************************************************/</span><span class="token keyword">void</span> SHAREDMEMORY<span class="token operator">::</span><span class="token function">SendMat</span><span class="token punctuation">(</span>cv<span class="token operator">::</span>Mat img<span class="token punctuation">,</span> <span class="token keyword">char</span> indexAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ImgInf img_head<span class="token punctuation">;</span>    img_head<span class="token punctuation">.</span>width <span class="token operator">=</span> img<span class="token punctuation">.</span>cols<span class="token punctuation">;</span>    img_head<span class="token punctuation">.</span>height <span class="token operator">=</span> img<span class="token punctuation">.</span>rows<span class="token punctuation">;</span>    img_head<span class="token punctuation">.</span>type <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>img_head<span class="token punctuation">.</span>type <span class="token operator">==</span> CV_64FC1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pBuf <span class="token operator">+</span> indexAddress<span class="token punctuation">,</span> <span class="token operator">&amp;</span>img_head<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ImgInf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pBuf <span class="token operator">+</span> indexAddress <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ImgInf<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Address of dst</span>            img<span class="token punctuation">.</span>data<span class="token punctuation">,</span>                                              <span class="token comment" spellcheck="true">// Src data</span>            img<span class="token punctuation">.</span>cols <span class="token operator">*</span> img<span class="token punctuation">.</span>rows <span class="token operator">*</span> img<span class="token punctuation">.</span><span class="token function">channels</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// size of data</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pBuf <span class="token operator">+</span> indexAddress<span class="token punctuation">,</span> <span class="token operator">&amp;</span>img_head<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ImgInf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pBuf <span class="token operator">+</span> indexAddress <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ImgInf<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Address of dst</span>            img<span class="token punctuation">.</span>data<span class="token punctuation">,</span>                                              <span class="token comment" spellcheck="true">// Src data</span>            img<span class="token punctuation">.</span>cols <span class="token operator">*</span> img<span class="token punctuation">.</span>rows <span class="token operator">*</span> img<span class="token punctuation">.</span><span class="token function">channels</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true">// size of data</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"write shared mem successful."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*************************************************************************************FuncName  :cv::Mat SHAREDMEMORY::ReceiveMat(char indexAddress)Desc      :接收Mat数据Input     :    char indexAddress     共享内存中起始位置，若只有一路视频则无偏移Output    :Mat图像**************************************************************************************/</span>cv<span class="token operator">::</span>Mat SHAREDMEMORY<span class="token operator">::</span><span class="token function">ReceiveMat</span><span class="token punctuation">(</span><span class="token keyword">char</span> indexAddress<span class="token punctuation">)</span><span class="token punctuation">{</span>    ImgInf img_head<span class="token punctuation">;</span>    cv<span class="token operator">::</span>Mat img<span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>img_head<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pBuf <span class="token operator">+</span> indexAddress<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ImgInf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    img<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>img_head<span class="token punctuation">.</span>height<span class="token punctuation">,</span> img_head<span class="token punctuation">.</span>width<span class="token punctuation">,</span> img_head<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>img_head<span class="token punctuation">.</span>type <span class="token operator">==</span> CV_64FC1<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pBuf <span class="token operator">+</span> indexAddress <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ImgInf<span class="token punctuation">)</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>cols <span class="token operator">*</span> img<span class="token punctuation">.</span>rows <span class="token operator">*</span> img<span class="token punctuation">.</span><span class="token function">channels</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pBuf <span class="token operator">+</span> indexAddress <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ImgInf<span class="token punctuation">)</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>cols <span class="token operator">*</span> img<span class="token punctuation">.</span>rows <span class="token operator">*</span> img<span class="token punctuation">.</span><span class="token function">channels</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> img<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*************************************************************************************FuncName  :void SHAREDMEMORY::SendStr(cv::Mat img, char indexAddress)Desc      :发送str数据Input     :    Mat img               发送图像    char indexAddress     共享内存中起始位置，若只有一路视频则无偏移Output    :None**************************************************************************************/</span><span class="token keyword">void</span> SHAREDMEMORY<span class="token operator">::</span><span class="token function">SendStr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pBuf<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"write shared mem successful."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*************************************************************************************FuncName  :void SHAREDMEMORY::ReceiveStr()Desc      :接收str数据Input     :NoneOutput    :获取的字符串**************************************************************************************/</span><span class="token keyword">char</span><span class="token operator">*</span> SHAREDMEMORY<span class="token operator">::</span><span class="token function">ReceiveStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pBuf<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"receive is:"</span><span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !ShareMemory_CPP</span></code></pre><h3 id="2-1-3-C-之间共享内存通信"><a href="#2-1-3-C-之间共享内存通信" class="headerlink" title="2.1.3 C++之间共享内存通信"></a>2.1.3 C++之间共享内存通信</h3><p>创建一个新的工程，导入上面两个文件，并创建<strong>WriteMem.cpp</strong>文件</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// WriteMem.cpp : 此文件为写共享内存</span><span class="token comment" spellcheck="true">// Author : Jiejing.Ma</span><span class="token comment" spellcheck="true">// Update : 2020/11/27</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ShareMemory.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 读图片或视频</span><span class="token keyword">void</span> <span class="token function">send_img</span><span class="token punctuation">(</span>SHAREDMEMORY sharedsend<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    int64 t0 <span class="token operator">=</span> cv<span class="token operator">::</span><span class="token function">getTickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    int64 t1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    string fps <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nFrames <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cv<span class="token operator">::</span>Mat frame<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Opening video..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    VideoCapture <span class="token function">cap</span><span class="token punctuation">(</span><span class="token string">"test.flv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cap<span class="token punctuation">.</span><span class="token function">isOpened</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        cap <span class="token operator">>></span> frame<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>frame<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"ERROR: Can't grab video frame."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">resize</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> frame<span class="token punctuation">,</span> <span class="token function">Size</span><span class="token punctuation">(</span>FRAME_W<span class="token punctuation">,</span> FRAME_H<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nFrames<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>frame<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nFrames <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                int64 t1 <span class="token operator">=</span> cv<span class="token operator">::</span><span class="token function">getTickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                fps <span class="token operator">=</span> <span class="token string">" Send FPS:"</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">getTickFrequency</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> N <span class="token operator">/</span> <span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"fps"</span><span class="token punctuation">;</span>                    t0 <span class="token operator">=</span> t1<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cv<span class="token operator">::</span><span class="token function">putText</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> fps<span class="token punctuation">,</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cv<span class="token operator">::</span>FONT_HERSHEY_COMPLEX<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cv<span class="token operator">::</span><span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sharedsend<span class="token punctuation">.</span><span class="token function">SendMat</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> index <span class="token operator">*</span> FRAME_NUMBER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SHAREDMEMORY sharedmem<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//char str[] = "hello";</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sharedmem<span class="token punctuation">.</span>state <span class="token operator">==</span> INITSUCCESS<span class="token punctuation">)</span> <span class="token function">send_img</span><span class="token punctuation">(</span>sharedmem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//if (sharedmem.state == INITSUCCESS) sharedmem.SendStr(str);</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建一个新的工程，导入上面两个文件，并创建<strong>ReadMem.cpp</strong>文件</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// ReadMem.cpp : 此文件为读共享内存</span><span class="token comment" spellcheck="true">// Author : Jiejing.Ma</span><span class="token comment" spellcheck="true">// Update : 2020/11/27</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ShareMemory.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    SHAREDMEMORY sharemem<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sharemem<span class="token punctuation">.</span>state <span class="token operator">==</span> INITSUCCESS<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// read video frame from shared memory.s</span>        int64 t0 <span class="token operator">=</span> cv<span class="token operator">::</span><span class="token function">getTickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        int64 t1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        string fps <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nFrames <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"ReadMemShow"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            nFrames<span class="token operator">++</span><span class="token punctuation">;</span>            Mat frame <span class="token operator">=</span> sharemem<span class="token punctuation">.</span><span class="token function">RecieveMat</span><span class="token punctuation">(</span>index <span class="token operator">*</span> FRAME_NUMBER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>frame<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nFrames <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                    int64 t1 <span class="token operator">=</span> cv<span class="token operator">::</span><span class="token function">getTickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    fps <span class="token operator">=</span> <span class="token string">" Average FPS:"</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">getTickFrequency</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> N <span class="token operator">/</span> <span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"fps"</span><span class="token punctuation">;</span>                    t0 <span class="token operator">=</span> t1<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                cv<span class="token operator">::</span><span class="token function">putText</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> fps<span class="token punctuation">,</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cv<span class="token operator">::</span>FONT_HERSHEY_COMPLEX<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cv<span class="token operator">::</span><span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"ReadMemShow"</span><span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//char* str = sharemem.RecieveStr();</span>    <span class="token punctuation">}</span>    <span class="token function">destroyAllWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>同时开启两个工程，则可以接收视频了。</p><h3 id="2-1-4-C-之间共享内存通信视频测试结果"><a href="#2-1-4-C-之间共享内存通信视频测试结果" class="headerlink" title="2.1.4 C++之间共享内存通信视频测试结果"></a>2.1.4 C++之间共享内存通信视频测试结果</h3><p>这里看到，写共享内存速度为15fps，读共享内存速度为65fps（超实时），写速度主要的影响因素与opecv有关。如果优化，还需改视频编解码部分。<br><img src="https://img-blog.csdnimg.cn/20201130204440444.png#pic_center" alt="C++和python共享内存传视频测试结果"></p><h2 id="2-2-C-和python间视频通信"><a href="#2-2-C-和python间视频通信" class="headerlink" title="2.2 C++和python间视频通信"></a>2.2 C++和python间视频通信</h2><p>这里以C++作为发送端，python作为接受端。逆向过程还有待测试。网上有教程提到python不能创建共享内存作为发送端，这种说法是错的。本人已测试过，只是发送数据都是字符串型，对于图像数据还有待研究。</p><h3 id="2-2-1-接口函数"><a href="#2-2-1-接口函数" class="headerlink" title="2.2.1 接口函数"></a>2.2.1 接口函数</h3><p>这里主要用到的是<strong>mmap</strong>和<strong>numpy的frombuffer</strong>.</p><p>关于mmap，请参考<a href="http://doc.codingdict.com/python_352/library/mmap.html">官网</a>的接口说明。十分详细，不再赘述。</p><p>frombuffer:</p><pre class=" language-python"><code class="language-python">numpy<span class="token punctuation">.</span>frombuffer<span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> dtype<span class="token operator">=</span>float<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> offset<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><blockquote><p>Interpret a buffer as a 1-dimensional array.</p></blockquote><blockquote><p>Parameters<br>bufferbuffer_like<br>An object that exposes the buffer interface.</p></blockquote><blockquote><p>dtypedata-type, optional<br>Data-type of the returned array; default: float.</p></blockquote><blockquote><p>countint, optional<br>Number of items to read. -1 means all data in the buffer.</p></blockquote><blockquote><p>offsetint, optional<br>Start reading the buffer from this offset (in bytes); default: 0.</p></blockquote><p>参考<a href="https://numpy.org/doc/stable/reference/generated/numpy.frombuffer.html">官网</a></p><h3 id="2-2-1-C-与python之间共享内存通信"><a href="#2-2-1-C-与python之间共享内存通信" class="headerlink" title="2.2.1 C++与python之间共享内存通信"></a>2.2.1 C++与python之间共享内存通信</h3><p>前面已经实现C++代码。不需要改动。只需启动写共享内存工程即可。</p><p>python代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> mmap<span class="token keyword">import</span> os<span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># -----------------Define info in ShareMemory.h-----------------</span>IMG_HEAD_OFFSET <span class="token operator">=</span> <span class="token number">12</span><span class="token comment" spellcheck="true"># typedef struct {</span><span class="token comment" spellcheck="true">#     int width;</span><span class="token comment" spellcheck="true">#     int height;</span><span class="token comment" spellcheck="true">#     int type;</span><span class="token comment" spellcheck="true"># }ImgInf;       //图像信息12字节</span>FRAME_NUMBER <span class="token operator">=</span> <span class="token number">1</span>FRAME_W <span class="token operator">=</span> <span class="token number">1920</span>FRAME_H <span class="token operator">=</span> <span class="token number">1080</span>FRAME_W_H <span class="token operator">=</span> FRAME_W <span class="token operator">*</span> FRAME_HFRAME_SIZE <span class="token operator">=</span> FRAME_W_H <span class="token operator">*</span> <span class="token number">3</span>MEMORY_SIZE <span class="token operator">=</span> <span class="token punctuation">(</span>FRAME_SIZE <span class="token operator">+</span> IMG_HEAD_OFFSET<span class="token punctuation">)</span> <span class="token operator">*</span> FRAME_NUMBERsShareMemName <span class="token operator">=</span> <span class="token string">"ShareMedia"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    fpx <span class="token operator">=</span> mmap<span class="token punctuation">.</span>mmap<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> FRAME_SIZE<span class="token operator">+</span>IMG_HEAD_OFFSET<span class="token punctuation">,</span> sShareMemName<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Read img as numpy</span>    cv2<span class="token punctuation">.</span>namedWindow<span class="token punctuation">(</span><span class="token string">"python_sharedmem_show"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    t0 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>getTickCount<span class="token punctuation">(</span><span class="token punctuation">)</span>    N <span class="token operator">=</span> <span class="token number">50</span>    nFrame <span class="token operator">=</span> <span class="token number">0</span>    fps <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        nFrame <span class="token operator">+=</span> <span class="token number">1</span>        img <span class="token operator">=</span> np<span class="token punctuation">.</span>frombuffer<span class="token punctuation">(</span>fpx<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>        img <span class="token operator">=</span> img<span class="token punctuation">[</span>IMG_HEAD_OFFSET<span class="token punctuation">:</span>FRAME_SIZE<span class="token operator">+</span>IMG_HEAD_OFFSET<span class="token punctuation">]</span>        img <span class="token operator">=</span> img<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>FRAME_H<span class="token punctuation">,</span>FRAME_W<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Print Average  FPS</span>        <span class="token keyword">if</span> nFrame <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            t1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>getTickCount<span class="token punctuation">(</span><span class="token punctuation">)</span>            fps <span class="token operator">=</span> N<span class="token operator">*</span>cv2<span class="token punctuation">.</span>getTickFrequency<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span>            t0 <span class="token operator">=</span> t1        cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">"Average FPS:"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>fps<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"fps"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>FONT_HERSHEY_COMPLEX<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"python_sharedmem_show"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>        img <span class="token operator">=</span> None        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="3-基于Socket的视频传输"><a href="#3-基于Socket的视频传输" class="headerlink" title="3.基于Socket的视频传输"></a>3.基于Socket的视频传输</h1><p>这里是基于Linux开发的Socket通信。而共享内存是基于Windows平台。</p><h2 id="3-1-cpp端socket"><a href="#3-1-cpp端socket" class="headerlink" title="3.1 cpp端socket"></a>3.1 cpp端socket</h2><p>cppsocket.cpp</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义socket信息</span>    <span class="token keyword">char</span> <span class="token operator">*</span>servInetAddr <span class="token operator">=</span> <span class="token string">"192.168.113.173"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> servPort <span class="token operator">=</span> <span class="token number">8081</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> connfd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in addr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建socket</span>    connfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>connfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"socket创建失败"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 准备通信地址</span>    addr<span class="token punctuation">.</span>sin_family<span class="token operator">=</span>AF_INET<span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_port<span class="token operator">=</span><span class="token function">htons</span><span class="token punctuation">(</span>servPort<span class="token punctuation">)</span><span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>servInetAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// bind</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"bind连接失败"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"bind连接成功"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取视频帧并发送</span>    Mat img<span class="token punctuation">;</span>    VideoCapture <span class="token function">capture</span><span class="token punctuation">(</span><span class="token string">"./test.flv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>uchar<span class="token operator">></span> data_encode<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>capture<span class="token punctuation">.</span><span class="token function">isOpened</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>capture<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">imencode</span><span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">,</span>img<span class="token punctuation">,</span>data_encode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len_encode <span class="token operator">=</span> data_encode<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string len <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>len_encode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> len<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token operator">-</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> len<span class="token operator">=</span>len<span class="token operator">+</span><span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发送数据</span>        <span class="token function">send</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span>len<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>len<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> send_char<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len_encode<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            send_char<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>data_encode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">send</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span>send_char<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 接收返回信息</span>        <span class="token keyword">char</span> recvBuf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">recv</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span> recvBuf<span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>recvBuf<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-python端"><a href="#3-2-python端" class="headerlink" title="3.2 python端"></a>3.2 python端</h2><p>pysocket.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">recv_size</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>    buf<span class="token operator">=</span>b<span class="token string">''</span>    <span class="token keyword">while</span> count<span class="token punctuation">:</span>        newbuf <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>count<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> newbuf<span class="token punctuation">:</span> <span class="token keyword">return</span> None        buf <span class="token operator">+=</span>newbuf        count <span class="token operator">-=</span> len<span class="token punctuation">(</span>newbuf<span class="token punctuation">)</span>    <span class="token keyword">return</span> buf<span class="token keyword">def</span> <span class="token function">recv_all</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>    buf <span class="token operator">=</span> b<span class="token string">''</span>    <span class="token keyword">while</span> count<span class="token punctuation">:</span>        newbuf <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> newbuf<span class="token punctuation">:</span><span class="token keyword">return</span> None        buf <span class="token operator">+=</span>newbuf        count <span class="token operator">-=</span> len<span class="token punctuation">(</span>newbuf<span class="token punctuation">)</span>    <span class="token keyword">return</span> buf<span class="token comment" spellcheck="true"># 创建socket</span>s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 准备通信地址</span>address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'192.168.113.173'</span><span class="token punctuation">,</span><span class="token number">8081</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>address<span class="token punctuation">)</span>s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Waiting for images...'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 接受TCP链接并返回（conn, addr），其中conn是新的套接字对象，可以用来接收和发送数据，addr是链接客户端的地址。</span>conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    n <span class="token operator">+=</span><span class="token number">1</span>    length <span class="token operator">=</span> recv_size<span class="token punctuation">(</span>conn<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    t0<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>length<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 若成功接收指定大小信息，进一步接收整张图</span>        string_data <span class="token operator">=</span> recv_all<span class="token punctuation">(</span>conn<span class="token punctuation">,</span>int<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> numpy<span class="token punctuation">.</span>fromstring<span class="token punctuation">(</span>string_data<span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'uint8'</span><span class="token punctuation">)</span>        decimg <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imdecode<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>namedWindow<span class="token punctuation">(</span><span class="token string">'python-recv'</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'python-recv'</span><span class="token punctuation">,</span>decimg<span class="token punctuation">)</span>        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"111111"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Image recieved successfully!fps:'</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span>t1<span class="token operator">-</span>t0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'recieved messages!'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        t0<span class="token operator">=</span>t1    <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="3-3-CMakeList"><a href="#3-3-CMakeList" class="headerlink" title="3.3 CMakeList"></a>3.3 CMakeList</h2><p>Linux 下编译CPP文件，这里使用CMakeList:</p><pre class=" language-shell"><code class="language-shell">cmake_minimum_required(VERSION 3.0.0)project(client VERSION 0.1.0)include(CTest)enable_testing()# find opencv and linkfind_package(OpenCV REQUIRED)message(STATUS "Opencv library status:")message(STATUS " version:${OpenCV_VERSION}")message(STATUS " libraries:${OpenCV_LIBS}")message(STATUS " include path:${OpenCV_INCLUDE_DIRS}")include_directories(${OpenCV_INCLUDE_DIRS})link_libraries(${OpenCV_LIBS})add_executable(client cppsocket.cpp)set(CMAKE_CXX_FLAGE "${CMAKE_CXX_FLAGE} -g")</code></pre><h2 id="3-4-测试结果"><a href="#3-4-测试结果" class="headerlink" title="3.4 测试结果"></a>3.4 测试结果</h2><p>结果就是速度超级慢，大概一秒多一帧。</p><h1 id="4-结论"><a href="#4-结论" class="headerlink" title="4 结论"></a>4 结论</h1><p>C++和python之间通信，可以采用<strong>C++调python</strong>的方式。请参考之前的文章。<a href="https://blog.csdn.net/weixin_38369492/article/details/110090225">Ubuntu下C++调python</a><br>这种方式，从架构的角度来讲，最简单。工程量和已有经验的角度，emm可能坑比较多。速度也应该最快（推测）</p><p>也可以使用<strong>进程间通信</strong>。当然这个成本就高了。有两种方式，一是<strong>共享内存</strong>机制，一是<strong>socket通信</strong>。前者更快，但只能在一个平台上。后者慢，可以支持不同电脑间通信。</p><p>最后关于基于共享内存方式，影响<strong>速度</strong>的主要是<strong>写共享内存</strong>，而这又与<strong>opencv</strong>读视频有关，与<strong>视频编解码</strong>有关。想要提高写内存速度，需要从底层修改视频编解码。可以参考<strong>UE4</strong>的相关插件解决。</p>]]></content>
      
      
      <categories>
          
          <category> Communication </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 共享内存 </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测中的评价指标</title>
      <link href="2020/07/15/cv/mu-biao-jian-ce-zhong-de-ping-jie-han-shu/"/>
      <url>2020/07/15/cv/mu-biao-jian-ce-zhong-de-ping-jie-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-问题定义"><a href="#1-问题定义" class="headerlink" title="1. 问题定义"></a>1. 问题定义</h1><p><strong>目标：</strong> 预测图像中各个物体是否出现及其位置。目标检测涉及图像中物体的<strong>定位</strong>和<strong>分类</strong>。<br><img src="https://img-blog.csdnimg.cn/202007151105556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODM2OTQ5Mg==,size_16,color_FFFFFF,t_70" alt="目标检测任务"><br>例如我们要区分出红细胞(RBC)、白细胞(WBC)和血小板(platelets)。除了需要用框(bounding box)框出物体，还需要对他们分类，标在框上。每个类别后跟着一个数字即判定为该类别的置信度。</p><p><strong>那么如何判断那个模型好（准确）呢？</strong><br>比如上图中绿色的框标出大部分的白细胞 ，但是有些边缘的没有标出，但是我们不能通过图片，凭直觉判断模型的好坏。我们需要一个量化指标。即直接量化每个模型在测试集中的图像、类和不同置信阈值下的表现。这个工具就是mAP。<br>为了学习mAP，需要先了解几个概念。</p><h1 id="2-几个概念"><a href="#2-几个概念" class="headerlink" title="2. 几个概念"></a>2. 几个概念</h1><ul><li>mAP: （Mean Average Precision）平均AP</li><li>AP：P-R下面积，平均精度。</li><li>P-R曲线：Precision-Recall曲线</li><li>Precision：精度，即所有检测结果中，正确（IoU&gt;0.5）个数的占比。<code>TP/(TP+FP)</code> 。</li><li>Recall：召回率，即所有真实物体中被检测出来的个数占比。<code>TP/(TP+FN)</code></li><li>TP：(True Positive)真正例。IoU&gt;0.5的检测框个数，同一个Ground Truth只计算一次</li><li>FP：(False Positive)假正例。IoU&lt;0.5的检测框个数，同一个GT的多余检测框也计算</li><li>FN：(False Negatives)假负例。GT里没有被检测到的数量。即模型漏检的物体。</li><li>IoU：交并比。评价边界框正确性的度量指标</li></ul><p><strong>一张有猫的图片中，不光要检测出猫，还要检测猫的位置正确。</strong></p><h1 id="3-Precision-Recall曲线"><a href="#3-Precision-Recall曲线" class="headerlink" title="3. Precision-Recall曲线"></a>3. Precision-Recall曲线</h1><p>可以分别用一句话区分精度Precision和召回率Recall</p><blockquote><p>Precision : “when your model guesses how often does it guess correctly?” （模型多少次预测正确？）<br>Recall ：“has your model guessed every time that it should have guessed?” （模型应该检测到的某一物体时候是否检测到了物体？）</p></blockquote><p>例如上面的例子。假设一张图里有10个红细胞，模型检测到一个红细胞，并且标注位置和类别都正确，那么模型就是有<strong>高精度</strong>（1个红细胞的框是准确的），<strong>低召回率</strong>（10个只检测到1个）</p><p>通过调整<strong>阈值</strong>可以控制召回率。具体做法要看模型需要的环境。比如当避免假真例比避免假负例更重要时（可以不都检测到，但检测到的一定要正确），可以设置高阈值。</p><p>建立Precision和Recall之间的函数关系并绘制在图上，这个曲线就是<strong>P-R曲线</strong>。该曲线<strong>向下倾斜的（递减）</strong>，因为当置信度降低时，会做出更多的预测(提升召回)，而做出的预测则不那么精确(影响精度)。打个比方，当要求“说出每一种鲨鱼的名称”，你会从熟悉且肯定的说起（高精度），但是很难保证说出来的都正确（接近于高召回率，低精度）。如果PR曲线不是向下倾斜的，说明模型有问题，需要回去检测。<br><img src="https://img-blog.csdnimg.cn/20200715152547411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODM2OTQ5Mg==,size_16,color_FFFFFF,t_70" alt="Precision和Recall"></p><p><strong>那么如何通过P-R曲线找到最好的阈值呢？</strong><br>有三种思路。<br>（1）斜率接近-1<br>（2）计算P-R曲线下的面积（AUC，Area Under the Curve）<br>（3）计算平均精度（AP，Average Precision）<br>通常我们采用AP的方法。下面将开始介绍AP的计算。<br><img src="https://img-blog.csdnimg.cn/20200715153333755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODM2OTQ5Mg==,size_16,color_FFFFFF,t_70" alt="P-R曲线理解"></p><h1 id="4-AP"><a href="#4-AP" class="headerlink" title="4. AP"></a>4. AP</h1><p>VOC2010前：Recall &gt;= 0, 0.1, 0.2, …, 1共11个recall下precision的平均值。熟悉微积分的可以看出，下面公式的含义就是$p(r)$即precision-recall曲线下的面积。<br>$$ AP = \frac {1}{11}\sum_{r\in{\lbrace 0,0.1,…,1\rbrace}}p_{interp}(r)$$<br>VOC2010后：所有数据点，而不是仅使用11个recall值来计算AP。<br>$$ p_{interp}(r)=\max_{\hat{r}:\hat{r}\geq{r}}p(\hat{r})$$<br>为保证p-r曲线单调递减，对于某个recall值r，precision值取所有recall&gt;=r中的最大值。</p><h1 id="5-mAP"><a href="#5-mAP" class="headerlink" title="5. mAP"></a>5. mAP</h1><p>AP是针对一个类别的计算。所有类别的AP平均值即mAP。<br>建议在分析模型结果时查看各个类的AP值。这些值也许暗示你需要添加更多的训练样本。<br>例如下面的分析结果：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// EfficientDet模型</span><span class="token number">78.59</span><span class="token operator">%</span> <span class="token operator">=</span> Platelets AP <span class="token number">77.87</span><span class="token operator">%</span> <span class="token operator">=</span> RBC AP <span class="token number">96.47</span><span class="token operator">%</span> <span class="token operator">=</span> WBC AP mAP <span class="token operator">=</span> <span class="token number">84.31</span><span class="token operator">%</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// YOLOv3模型</span><span class="token number">72.15</span><span class="token operator">%</span> <span class="token operator">=</span> Platelets AP <span class="token number">74.41</span><span class="token operator">%</span> <span class="token operator">=</span> RBC AP <span class="token number">95.54</span><span class="token operator">%</span> <span class="token operator">=</span> WBC AP mAP <span class="token operator">=</span> <span class="token number">80.70</span><span class="token operator">%</span></code></pre><p>表明在这一数据集上EfficientDet更精确 ，同时，对于白细胞检测比红细胞更容易。<br>mAP除了分不同的IOU阈值（COCO从0.5到0.95，步长为0.05），还通常分为小、中、大三个对象，帮助识别模型(或数据集)可能出错的地方。</p><hr><p>【参考】</p><div id="refer-anchor-1"></div><p>[1] <a href="https://tarangshah.com/blog/2018-01-27/what-is-map-understanding-the-statistic-of-choice-for-comparing-object-detection-models/">Measuring Object Detection models - mAP - What is Mean Average Precision?</a></p><div id="refer-anchor-2"></div><p>[2]<a href="https://towardsdatascience.com/what-is-mean-average-precision-map-in-object-detection-8f893b48afd3">What is Mean Average Precision (mAP) in Object Detection?</a></p>]]></content>
      
      
      <categories>
          
          <category> CV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CV </tag>
            
            <tag> 目标检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepStream5.0结合OpenCV4实现视频的分析和截图</title>
      <link href="2020/05/15/deepstream/deepstream5.0-jie-he-opencv4-shi-xian-shi-pin-de-fen-xi-he-jie-tu/"/>
      <url>2020/05/15/deepstream/deepstream5.0-jie-he-opencv4-shi-xian-shi-pin-de-fen-xi-he-jie-tu/</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>上次测试opencv结合deepstream4进行截图时，出现了一个<a href="https://blog.csdn.net/weixin_38369492/article/details/105418579#3__94">错误</a>。当时在deepstream4中，虽然报错却仍能保证程序正常进行。但是deepstream5出来以后，迁移代码再跑时，这个错误就直接让程序崩掉了。找了半天没找到原因，所以改写了一下截图部分代码。</p><p><strong>思路</strong><br><a href="https://blog.csdn.net/weixin_38369492/article/details/105418579">DeepStream结合OpenCV4实现视频的分析和截图（二）</a>中的方式是取一帧数据，进行格式和参数转换，保存到另一个==NvBufSurface==结构中。然后再从该结构取数据保存到opencv的==mat==中，imwrite存图。问题出现在==NvBufSurface==转换上。</p><p>这次干脆放弃转换NvBufSurface，不再调用==NvBufSurfTransform==函数，而是先取数据到mat再转换格式。而是参考<a href="https://blog.csdn.net/weixin_38369492/article/details/105121729">DeepStream结合OpenCV4实现视频的分析和截图（一）</a>中方法，稍作调整。</p><h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a>1. 环境</h1><ul><li>Ubuntu 18.04</li><li>CUDA 10.2</li><li>CUDNN 7.6.5.32</li><li>TensorRT 7.0.0.2</li><li>DeepStream 5.0</li><li>OpenCV 4.2</li></ul><h1 id="2-方法概述"><a href="#2-方法概述" class="headerlink" title="2. 方法概述"></a>2. 方法概述</h1><p>取出指定源帧数据-&gt;cudaMemcpy拷贝出帧数据-&gt;存到mat结构中-&gt;颜色空间转换。</p><p>相比（一）中代码，这里多了指定源，以及NV12转BGR。 </p><ul><li><strong>指定源</strong>利用surface-&gt;surfaceList[batch_id]</li><li><strong>格式转换</strong>首先要查看surface原始的色彩空间，比如我在deepstream-app上测试的，infer后的色彩空间是NV12。</li></ul><ol><li><strong>NV12的Mat定义：</strong></li></ol><p>注意是==height*3/2==，==CV_8UC1==</p><pre class=" language-cpp"><code class="language-cpp">cv<span class="token operator">::</span>Mat frame <span class="token operator">=</span> cv<span class="token operator">::</span><span class="token function">Mat</span><span class="token punctuation">(</span>frame_height <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> frame_width<span class="token punctuation">,</span> CV_8UC1<span class="token punctuation">,</span> src_data<span class="token punctuation">,</span> frame_step<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li><strong>OpenCV中NV12转BGR</strong></li></ol><pre class=" language-cpp"><code class="language-cpp">cv<span class="token operator">::</span><span class="token function">cvtColor</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> out_mat<span class="token punctuation">,</span> CV_YUV2BGR_NV12<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li><strong>图像压缩</strong></li></ol><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">float</span> fx <span class="token operator">=</span> <span class="token number">0.6</span><span class="token punctuation">;</span><span class="token keyword">float</span> fy <span class="token operator">=</span> <span class="token number">0.6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//图像压缩比例</span>cv<span class="token operator">::</span>Size dsize <span class="token operator">=</span> cv<span class="token operator">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token function">round</span><span class="token punctuation">(</span>fx <span class="token operator">*</span> out_mat<span class="token punctuation">.</span>cols<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span>fy <span class="token operator">*</span> out_mat<span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cv<span class="token operator">::</span><span class="token function">resize</span><span class="token punctuation">(</span>source_mat<span class="token punctuation">,</span> out_mat<span class="token punctuation">,</span> dsize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cv<span class="token operator">::</span>INTER_AREA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重采样差值法进行图像压缩</span></code></pre><h1 id="3-Code"><a href="#3-Code" class="headerlink" title="3. Code"></a>3. Code</h1><pre class=" language-cpp"><code class="language-cpp">batch_id <span class="token operator">=</span> frame_meta<span class="token operator">-</span><span class="token operator">></span>batch_id<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>in_map_info<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>in_map_info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">gst_buffer_map</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>in_map_info<span class="token punctuation">,</span> GST_MAP_READ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">g_print</span><span class="token punctuation">(</span><span class="token string">"Error: Failed to map gst buffer\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>surface <span class="token operator">=</span> <span class="token punctuation">(</span>NvBufSurface <span class="token operator">*</span><span class="token punctuation">)</span>in_map_info<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>src_data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>src_data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>surface<span class="token operator">-</span><span class="token operator">></span>surfaceList<span class="token punctuation">[</span>batch_id<span class="token punctuation">]</span><span class="token punctuation">.</span>dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>src_data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">g_print</span><span class="token punctuation">(</span><span class="token string">"Error: failed to malloc src_data \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> PLATFORM_TEGRA</span><span class="token function">NvBufSurfaceMap</span><span class="token punctuation">(</span>surface<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> NVBUF_MAP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>NvBufSurfacePlaneParams <span class="token operator">*</span>pParams <span class="token operator">=</span> <span class="token operator">&amp;</span>surface<span class="token operator">-</span><span class="token operator">></span>surfaceList<span class="token punctuation">[</span>batch_id<span class="token punctuation">]</span><span class="token punctuation">.</span>planeParams<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_planes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> num_planes <span class="token operator">&lt;</span> pParams<span class="token operator">-</span><span class="token operator">></span>num_planes<span class="token punctuation">;</span> num_planes<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num_planes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        offset <span class="token operator">+</span><span class="token operator">=</span> pParams<span class="token operator">-</span><span class="token operator">></span>height<span class="token punctuation">[</span>num_planes <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>pParams<span class="token operator">-</span><span class="token operator">></span>bytesPerPix<span class="token punctuation">[</span>num_planes <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> pParams<span class="token operator">-</span><span class="token operator">></span>width<span class="token punctuation">[</span>num_planes <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> h <span class="token operator">&lt;</span> pParams<span class="token operator">-</span><span class="token operator">></span>height<span class="token punctuation">[</span>num_planes<span class="token punctuation">]</span><span class="token punctuation">;</span> h<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>src_data <span class="token operator">+</span> offset <span class="token operator">+</span> h <span class="token operator">*</span> pParams<span class="token operator">-</span><span class="token operator">></span>bytesPerPix<span class="token punctuation">[</span>num_planes<span class="token punctuation">]</span> <span class="token operator">*</span> pParams<span class="token operator">-</span><span class="token operator">></span>width<span class="token punctuation">[</span>num_planes<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>surface<span class="token operator">-</span><span class="token operator">></span>surfaceList<span class="token punctuation">[</span>batch_id<span class="token punctuation">]</span><span class="token punctuation">.</span>mappedAddr<span class="token punctuation">.</span>addr<span class="token punctuation">[</span>num_planes<span class="token punctuation">]</span> <span class="token operator">+</span> h <span class="token operator">*</span> pParams<span class="token operator">-</span><span class="token operator">></span>pitch<span class="token punctuation">[</span>num_planes<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               pParams<span class="token operator">-</span><span class="token operator">></span>bytesPerPix<span class="token punctuation">[</span>num_planes<span class="token punctuation">]</span> <span class="token operator">*</span> pParams<span class="token operator">-</span><span class="token operator">></span>width<span class="token punctuation">[</span>num_planes<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">NvBufSurfaceSyncForDevice</span><span class="token punctuation">(</span>surface<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">NvBufSurfaceUnMap</span><span class="token punctuation">(</span>surface<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token function">cudaMemcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>src_data<span class="token punctuation">,</span>           <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>surface<span class="token operator">-</span><span class="token operator">></span>surfaceList<span class="token punctuation">[</span>batch_id<span class="token punctuation">]</span><span class="token punctuation">.</span>dataPtr<span class="token punctuation">,</span>           surface<span class="token operator">-</span><span class="token operator">></span>surfaceList<span class="token punctuation">[</span>batch_id<span class="token punctuation">]</span><span class="token punctuation">.</span>dataSize<span class="token punctuation">,</span>           cudaMemcpyDeviceToHost<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>gint frame_width <span class="token operator">=</span> <span class="token punctuation">(</span>gint<span class="token punctuation">)</span>surface<span class="token operator">-</span><span class="token operator">></span>surfaceList<span class="token punctuation">[</span>batch_id<span class="token punctuation">]</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>gint frame_height <span class="token operator">=</span> <span class="token punctuation">(</span>gint<span class="token punctuation">)</span>surface<span class="token operator">-</span><span class="token operator">></span>surfaceList<span class="token punctuation">[</span>batch_id<span class="token punctuation">]</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>gint frame_step <span class="token operator">=</span> surface<span class="token operator">-</span><span class="token operator">></span>surfaceList<span class="token punctuation">[</span>batch_id<span class="token punctuation">]</span><span class="token punctuation">.</span>pitch<span class="token punctuation">;</span>cv<span class="token operator">::</span>Mat frame <span class="token operator">=</span> cv<span class="token operator">::</span><span class="token function">Mat</span><span class="token punctuation">(</span>frame_height <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> frame_width<span class="token punctuation">,</span> CV_8UC1<span class="token punctuation">,</span> src_data<span class="token punctuation">,</span> frame_step<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// g_print("%d\n",frame.channels());</span><span class="token comment" spellcheck="true">// g_print("%d\n",frame.rows);</span><span class="token comment" spellcheck="true">// g_print("%d\n",frame.cols);</span>cv<span class="token operator">::</span>Mat out_mat <span class="token operator">=</span> cv<span class="token operator">::</span><span class="token function">Mat</span><span class="token punctuation">(</span>cv<span class="token operator">::</span><span class="token function">Size</span><span class="token punctuation">(</span>frame_width<span class="token punctuation">,</span> frame_height<span class="token punctuation">)</span><span class="token punctuation">,</span> CV_8UC3<span class="token punctuation">)</span><span class="token punctuation">;</span>cv<span class="token operator">::</span><span class="token function">cvtColor</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> out_mat<span class="token punctuation">,</span> CV_YUV2BGR_NV12<span class="token punctuation">)</span><span class="token punctuation">;</span>cv<span class="token operator">::</span><span class="token function">imwrite</span><span class="token punctuation">(</span>savefilename<span class="token punctuation">,</span> out_mat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>src_data <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">free</span><span class="token punctuation">(</span>src_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    src_data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">gst_buffer_unmap</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>in_map_info<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 视频分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频分析 </tag>
            
            <tag> DeepStream </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
